{
    "name": "Unity SDK",
    "text": "<p>The SuperAwesome Unity SDK (Software Development Kit) lets you to easily add COPPA compliant advertisements to your Unity mobile apps.  </p>\n<p>This project is hosted on GitHub: <a href=\"https://github.com/SuperAwesomeLTD/sa-unity-sdk/tree/develop_v3\">https://github.com/SuperAwesomeLTD/sa-unity-sdk/tree/develop_v3</a></p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "sections": [
                {
                    "name": "Registering on the Dashboard",
                    "text": "<p>If you haven&#39;t registered your app on the SuperAwesome Dashboard yet, you can do that by going to <a href=\"http://dashboard.superawesome.tv\">http://dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/IMG_01_Dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Once your app is registered, you can create placements for it and use the documentation provided below to integrate them into your iOS application.</p>\n<p>We also provide some demo placements that can be used for testing. These placements have a 100% fill rate.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Size</th>\n<th>Description</th>\n<th>Placement ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Standard Mobile</td>\n<td>320x50px</td>\n<td>Mobile banner</td>\n<td>30471</td>\n</tr>\n<tr>\n<td>SM Mobile</td>\n<td>300x50px</td>\n<td>Small mobile banner</td>\n<td>30476</td>\n</tr>\n<tr>\n<td>Interstitial</td>\n<td>320x480px</td>\n<td>Mobile fullscreen (portrait)</td>\n<td>30473</td>\n</tr>\n<tr>\n<td>Interstitial LS</td>\n<td>480x320px</td>\n<td>Mobile fullscreen (landscape)</td>\n<td>30474</td>\n</tr>\n<tr>\n<td>Leaderboard</td>\n<td>728x90px</td>\n<td>Tablet banner</td>\n<td>30475</td>\n</tr>\n<tr>\n<td>MPU</td>\n<td>300x250px</td>\n<td>Smaller tablet banner</td>\n<td>30472</td>\n</tr>\n<tr>\n<td>LG Interstitial</td>\n<td>768x1024px</td>\n<td>Tablet fullscreen (portrait)</td>\n<td>30477</td>\n</tr>\n<tr>\n<td>LG Interstitial LS</td>\n<td>1024x768px</td>\n<td>Tablet fullscreen (landscape)</td>\n<td>30478</td>\n</tr>\n<tr>\n<td>Video Preroll</td>\n<td>Flexible</td>\n<td>Mobile &amp; tablet video</td>\n<td>30479</td>\n</tr>\n<tr>\n<td>Gamewall</td>\n<td>Flexible</td>\n<td>Gamewall</td>\n<td>N/A</td>\n</tr>\n</tbody>\n</table>\n"
                },
                {
                    "name": "Integrate Unity SDK",
                    "text": "<p>To integrate the base Unity SDK into your app, first download the <a href=\"https://github.com/SuperAwesomeLTD/sa-unity-sdk/blob/develop_v3/SuperAwesome.unitypackage?raw=true\">SuperAwesome.unitypackage</a> file and import it into your Unity project as a custom assets package.</p>\n<p>You should see an image similar to this:</p>\n<p><img src=\"img/IMG_02_Import.png\" alt=\"\" title=\"Importing the SuperAwesome.unitypackage\"></p>\n<p>Select all the files, and click Import. \nIf all goes well you should have a series of new folders and files in your Assets directory.</p>\n<p><img src=\"img/IMG_03_Assets.png\" alt=\"\" title=\"The new assets folder\"></p>\n<p>The Unity SDK is essentially a thin layer of classes, functions and plugins used to communicate with the iOS or Android native SDKs. These two, depending on the case, will handle all the heavy lifting when it comes to actually loading ad data. \nRendering ads on screen falls also on the native SDKs for all three types of ads supported:</p>\n<ul>\n<li>Banner Ads</li>\n<li>Fullscreen or Interstitial Ads</li>\n<li>Preroll or Video Ads</li>\n</ul>\n<p>This is so that your games or apps have the best support for rich media or third party tags.\nIn order to complete the SDK integration, skip to either the iOS or Android section of this documentation.</p>\n"
                },
                {
                    "name": "Add iOS Dependencies",
                    "text": "<p>To complete integrating the SDK for iOS, you&#39;ll need to follow the next steps (once):</p>\n<h4 id=\"build-the-project-for-ios\">Build the project for iOS</h4>\n<p>To do this, click on <code>File &gt; Build Settings</code> menu.\nThere, select the <code>iOS</code> option and check the <code>Symlink Unity Libraries</code> and <code>Development build</code> options.\nThen, click on <code>Build</code> and save the new XCode project on your drive.</p>\n<p><img src=\"img/IMG_04_iOSBuild.png\" alt=\"\" title=\"iOS Build\"></p>\n<h4 id=\"adding-the-superawesome-sdk-via-cocoapods\">Adding the SuperAwesome SDK via CocoaPods</h4>\n<p>Next, you&#39;ll need to add the AwesomeAds iOS SDK. You can find more information <a href=\"https://developers.superawesome.tv/docs/iossdk?version=3\">here</a> or you can follow the quick guide below:</p>\n<p>Install CocoaPods (if you haven&#39;t already):</p>\n<pre><code>sudo gem install cocoapods\n</code></pre><p>Go to your project&#39;s directory and initialise CocoaPods:</p>\n<pre><code>cd /project_root\npod init\n</code></pre><p>This will create a new file simply called <code>Podfile</code>. Open it and alter it to look like this:</p>\n<pre><code># Uncomment this line to define a global platform for your project\nplatform :ios, &#39;6.0&#39;\n\ntarget &#39;Unity-iPhone&#39; do\n  pod &#39;SuperAwesome/Unity&#39;\nend\n</code></pre><p>Then execute:</p>\n<pre><code>pod update\n</code></pre><p>to tell CocoaPods to add the SuperAwesome iOS SDK library and Unity plugins to your project. \nDon&#39;t forget to open the <em>.xcworkspace</em> file to open your project in Xcode, instead of the .xcproj file, from here on out.</p>\n<h4 id=\"final-setup\">Final setup</h4>\n<p>After the CocoaPod dependency has been added, you have to make some changes to the default Unity build configuration, as the CocoaPods settings need to be propagated in the build target but won&#39;t have done so since Unity has already set these values.</p>\n<p>In the <code>Build Settings</code> tab you will need to search for each of <code>OTHER_LDFLAGS</code>, <code>OTHER_CFLAGS</code> and <code>HEADER_SEARCH_PATHS</code>, double-click on them, and add <code>$(inherited)</code> to the list of existing values for these settings. You likely will have also received a message when running <code>pod update</code>, warning you to do this.</p>\n<p><img src=\"img/IMG_05.png\" alt=\"\">\n<img src=\"img/IMG_06.png\" alt=\"\">\n<img src=\"img/IMG_07.png\" alt=\"\"></p>\n<p>Finally, when targeting devices for iOS 9 onwards, don&#39;t forget to add, for the moment, the following key to your plist file:</p>\n<pre><code>&lt;dict&gt;\n    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n</code></pre><p>to be able to load data over both HTTPS and HTTP.</p>\n<p>Once this is done your iOS project will be ready to use and any calls to the native SDK from your Unity project will work as expected.</p>\n"
                },
                {
                    "name": "Add Android Dependencies",
                    "text": "<p>To complete integrating the SDK for Android, you&#39;ll need to follow the next steps (once):</p>\n<h4 id=\"build-the-project-for-android\">Build the project for Android</h4>\n<p>To do this, click on <code>File &gt; Build Settings</code> menu.\nThere, select the <code>Android</code> option and check the <code>Google Android Project</code> and <code>Development build</code> options.\nThen, click on <code>Build</code> and save the new Android project on your drive.</p>\n<p><img src=\"img/IMG_08_AndroidBuild.png\" alt=\"\" title=\"Android Build\"></p>\n<h4 id=\"creating-the-setting-file\">Creating the setting file</h4>\n<p>Then, go to your new project folder:</p>\n<pre><code>cd /project_root\n</code></pre><p>And in the root of the project create an empty file called <code>settings.gradle</code>.</p>\n<p><img src=\"img/IMG_08_AndroidProjectStructure.png\" alt=\"\" title=\"Project structure\"></p>\n<p>Then, using Android Studio, import your Unity Android project by selecting the .gradle file you just created (and following all instructions).</p>\n<p><img src=\"img/IMG_08_ImportingAndroid.png\" alt=\"\" title=\"Importing Android project\"></p>\n<h4 id=\"adding-the-superawesome-sdk-via-gradle\">Adding the SuperAwesome SDK via Gradle</h4>\n<p>Next, you&#39;ll need to add the AwesomeAds Android SDK. You can find more information <a href=\"https://developers.superawesome.tv/docs/androidsdk?version=3\">here</a> or you can follow the quick guide below:</p>\n<p>Just include the following in your module&#39;s <code>build.gradle</code> file (usually the file under <code>MyApplication/app/</code>):</p>\n<pre><code>repositories {\n    maven {\n        url  &quot;http://dl.bintray.com/sharkofmirkwood/maven&quot;\n    }\n}\n\ndependencies {\n    compile &#39;tv.superawesome.sdk:sa-sdk:3.5.3@aar&#39;\n    compile &#39;com.google.android.gms:play-services:8.4.0&#39;\n}\n</code></pre><p>and click &quot;Sync Task&quot; when prompted.</p>\n<p><img src=\"img/IMG_09_GradleSetup.png\" alt=\"\" title=\"Setting up Android SDK with build.gradle\"></p>\n<p>If you&#39;d want to install the SDK from a .jar archive, not through Gradle, follow the instructions <a href=\"https://developers.superawesome.tv/docs/androidsdk/Getting%20Started/Adding%20the%20Library%20to%20Your%20Project%20-%20JAR%20Library?version=3\">here</a>.</p>\n<h4 id=\"final-setup\">Final setup</h4>\n<p>Finally, you&#39;ll need to do a small change to your default Unity Android manifest file.\nFind the line</p>\n<pre><code>&lt;meta-data android:name=&quot;unityplayer.ForwardNativeEventsToDalvik&quot; android:value=&quot;false&quot; /&gt;\n</code></pre><p>and set the value to <code>true</code>.\nIf you don&#39;t do this then banner ads won&#39;t be clickable on Android.</p>\n"
                },
                {
                    "name": "Before you start",
                    "text": "<p>Please remember that in Unity, click events are not triggered at all unless there is an EventSystem UI object. If this doesn&#39;t exist in the Hierarchy, add one from the <code>GameObject &gt; UI</code> menu.</p>\n<p>Also, since the Unity SDK uses the iOS / Android native SDK, testing your app in Unity won&#39;t show ads. Only by playing the app on a simulator or device will the whole ad process be triggered.</p>\n"
                }
            ]
        },
        {
            "name": "Displaying Ads with Prefabs",
            "text": "<p>Once you&#39;ve succesfully integrated the Unity SDK (and the native iOS or Android ones), the simplest way to actually load and diplay ads in your app is through prefabs.</p>\n<p>In the Project Explorer panel in the Unity interface, find the <code>Assets</code> folder and the <code>SuperAwesome</code> subfolder.\nThere you&#39;ll find three prefabs called:</p>\n<ul>\n<li>SABannerAd</li>\n<li>SAInterstitialAd </li>\n<li>SAVideoAd</li>\n</ul>\n<p><img src=\"img/IMG_10_Prefab1.png\" alt=\"\" title=\"Viewing prefabs\"></p>\n<p>Drag and drop any of then into your scene on the UI Layer.</p>\n<p><img src=\"img/IMG_11_BanenrPrefab.png\" alt=\"\" title=\"Adding the banner\"></p>\n<p>You&#39;ll see the prefab has a default rectangular shape and has a default texture associated. Don&#39;t worry about this, it will only display in editing mode, not playing mode.</p>\n<p>Each prefab has a number of associated parameters, that show up when you select a prefab.\nIn summary, this is what they&#39;re named and what they influence:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n<th>Banner</th>\n<th>Interstitial</th>\n<th>Video</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Placement Id</td>\n<td>Specify the ID of the placement you want to load an ad for</td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td>Test Mode Enabled</td>\n<td>If this placement is in test mode or not</td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td>Is Parental Gate Enabled</td>\n<td>If when clicking on the ad, a user will activate a Parental Gate</td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td>Should Auto Start</td>\n<td>Always set to True for Prefabs</td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td>Position</td>\n<td>Only for banners; Can be Top or Bottom</td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_NOK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_NOK.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Only for banners; Can be 320x50, 300x50, 728x90, 300x250</td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_NOK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_NOK.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td>Color</td>\n<td>Only for banners; Can be Transparent or Gray</td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_NOK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_NOK.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td>Should Automatically Close At End</td>\n<td>Only for video; specifies if the ad should close when it ends; should be set to true for prefabs</td>\n<td><img src=\"img/IMG_NOK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_NOK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td>Should Show Close Button</td>\n<td>Only for video; specifies if the close button should be visible</td>\n<td><img src=\"img/IMG_NOK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_NOK.png\" alt=\"\"></td>\n<td><img src=\"img/IMG_OK.png\" alt=\"\"></td>\n</tr>\n</tbody>\n</table>\n<p>Banners:</p>\n<p><img src=\"img/IMG_12_BannerPrefabConfig.png\" alt=\"\" title=\"Banner config\"></p>\n<p>Interstitials:</p>\n<p><img src=\"img/IMG_13_InterstitialPrefabConfig.png\" alt=\"\" title=\"Interstitial config\"></p>\n<p>Video Ads:</p>\n<p><img src=\"img/IMG_14_VideoPrefab_Config.png\" alt=\"\" title=\"Video config\"></p>\n"
        },
        {
            "name": "Loading Ads",
            "text": "<p>If you find that the prefab mechanism is a little too simple and does not afford enough flexibility, you can always load, create and display ads through code, using C#.</p>\n<p>To do that you&#39;ll need to create a script and attach it to your Main Camera.</p>\n<pre><code>using UnityEngine;\nusing System.Collections;\n// import SuperAwesome package\nusing SuperAwesome;\n\npublic class ExampleScript : MonoBehaviour {\n\n    // Use this for initialization\n    void Start () {\n\n    }\n\n    // Update is called once per frame\n    void Update () {\n\n    }\n}\n</code></pre><h4 id=\"sending-the-loading-message\">Sending the Loading message</h4>\n<p>In this example we&#39;ll use the <code>Start()</code> function to load ads.</p>\n<pre><code>void Start () {\n    // these two lines setup the SuperAwesome environment\n    // by default:\n    // Test Mode is disabled\n    // configuration is production (can be staging also, but not recommended) \n    SuperAwesome.SuperAwesome.instance.enableTestMode ();\n    SuperAwesome.SuperAwesome.instance.setConfigurationProduction ();\n\n    // and these three lines of code create an instance of a SALoader object\n    // (which is used to preload Ads)\n    // and call the loadAd() function, which takes one parameter - the placement Id\n    SALoader loader = SALoader.createInstance ();\n    loader.loadAd (5740);\n}\n</code></pre><h4 id=\"catching-loading-events\">Catching Loading events</h4>\n<p>Calling the <code>loadAd()</code> function initiates a call to the native iOS or Android code to asynchroniously load an ad.\nBecause it&#39;s async, we need a way to get the ad information back. We do this in three steps:</p>\n<p>Declaring that our ExampleScript implements the <code>SALoaderInterface</code>:</p>\n<pre><code>public class ExampleScript : MonoBehaviour , SALoaderInterface {\n</code></pre><p>Setting a delegate for the loader object:</p>\n<pre><code>loader.loaderDelegate = this;\n</code></pre><p>In this case the delegate is the ExampleScript class itself, since it declares that it will implement the <code>SALoaderInterface</code> required functions. But it can be any object that implements them.</p>\n<p>Finally, actually implementing the two functions specified by <code>SALoaderInterface</code>:</p>\n<pre><code>public class ExampleScript : MonoBehaviour, SALoaderInterface {\n\n    void Start () {\n        SuperAwesome.SuperAwesome.instance.enableTestMode ();\n        SuperAwesome.SuperAwesome.instance.setConfigurationProduction ();\n\n        SALoader loader = SALoader.createInstance ();\n        loader.loaderDelegate = this;\n        loader.loadAd (5740);\n    }\n\n    void Update () {\n\n    }\n\n    public void didLoadAd(SAAd adData) {\n        // when this function is called, ad data is correctly loaded and\n        // returned in the SAAd object\n    }\n\n    public void didFailToLoadAd(int placementId) {\n        // when this function is called, ad data has not been loaded\n        // correctly\n    }\n}\n</code></pre><p>Once this is done, we&#39;ve succesfully setup Awesome Ads, we&#39;ve sent a message to the native iOS / Android SDK to load an ad and received back in Unity the requested Ad data.</p>\n<p>The next chapters will deal with actually creating and displaying Banner, Interstitial and Video Ads.  </p>\n"
        },
        {
            "name": "Displaying Banner Ads",
            "text": "<p>Once ad data for a Banner type placement is loaded, one way to display the actual banner on screen is to change the <code>didLoadAd(SAAd adData)</code> function and add the following code:</p>\n<pre><code>public void didLoadAd(SAAd adData) {\n    SABannerAd banner = SABannerAd.createInstance ();\n    banner.setAd (adData);\n    banner.position = SABannerAd.BannerPosition.BOTTOM;\n    banner.size = SABannerAd.BannerSize.BANNER_320_50;\n    banner.color = SABannerAd.BannerColor.BANNER_GRAY;\n    banner.isParentalGateEnabled = false;\n    banner.play ();\n}\n</code></pre><p>The three most important lines of code here are:</p>\n<pre><code>SABannerAd banner = SABannerAd.createInstance ();\n</code></pre><p>Which creates a new SABanner object. This is equivalent to dragging &amp; dropping a banner prefab in your scene.</p>\n<pre><code>banner.setAd (adData);\n</code></pre><p>This basically tells the new <code>banner</code> object what ad data to use to display the ad contents on screen.\nadData is a <code>SAAd</code> type object. That&#39;s an custom object made to hold SuperAwesome Ad related data such as width, height, click URL, etc.</p>\n<pre><code>banner.play();\n</code></pre><p>Finally, call the <code>play()</code> function to actually display the ad on screen.</p>\n<p>Note that if you save the <code>SAAd adData</code> reference like this:</p>\n<pre><code>public void didLoadAd(SAAd adData) {\n    // where myAd is a previously declared SAAd type object\n    this.myAd = adData;\n}\n</code></pre><p>you can then create and play a banner ad anytime - once a button is clicked, at the end of a game level, etc.</p>\n"
        },
        {
            "name": "Displaying Interstitial Ads",
            "text": "<p>Interstitial ads follow the same pattern:</p>\n<pre><code>public void didLoadAd(SAAd adData) {\n    SAInterstitialAd iad = SAInterstitialAd.createInstance();\n    iad.setAd(adData);\n    iad.isParentalGateEnabled = true;\n    iad.play();\n}\n</code></pre>"
        },
        {
            "name": "Displaying Video Ads",
            "text": "<p>And Video Ads as well:</p>\n<pre><code>public void didLoadAd(SAAd adData) {\n    SAVideoAd vad = SAVideoAd.createInstance();\n    vad.setAd(adData);\n    vad.isParentalGateEnabled = true;\n    vad.shouldShowCloseButton = true;\n    vad.shouldAutomaticallyCloseAtEnd = true;\n    vad.play();\n}\n</code></pre>"
        },
        {
            "name": "Catching Ad Events",
            "text": "<p>Each ad type, Banner, Interstitial or Video, sends out callbacks for major ad lifecycle events.\nRegistering for events follows the same steps as registering for loading callbacks.</p>\n<p>Declare that ExampleScript implements the necessary interfaces</p>\n<pre><code>public class ExampleScript : MonoBehaviour , SALoaderInterface , SAAdInterface , SAVideoAdInterface , SAParentalGateInterface {\n</code></pre><p>Íet the delegates:</p>\n<p>Banner ads:</p>\n<pre><code>myBanner.adDelegate = this;\nmyBanner.parentalGateDelegate = this;\n</code></pre><p>Interstitial ads:</p>\n<pre><code>myInterstitial.adDelegate = this;\nmyInterstitial.parentalGateDelegate = this;\n</code></pre><p>Video Ads:</p>\n<pre><code>myVideoAd.adDelegate = this;\nmyVideoAd.parentalGateDelegate = this;\nmyVideoAd.videoAdDelegate = this;\n</code></pre><p>In the ExampleScript class, implement all the necessary functions:</p>\n<p>For <code>SAAdInterface</code>:</p>\n<pre><code>public void adWasShown(int placementId) {\n    // called when an ad is succesfully shown\n}\n\npublic void adFailedToShow(int placementId) {\n    // called when an ad failed to show for multiple reasons\n    // like there was no ad associated with a placement, etc\n}\n\npublic void adWasClosed(int placementId) {\n    // called when a video or interstitial ad (which are fullscreen) \n    // is closed by the user\n}\n\npublic void adWasClicked(int placementId) {\n    // called when a user clicks on an Ad\n}\n\npublic void adHasIncorrectPlacement(int placementId) {\n    // called when an ad has an incorrect placement type; for example:\n    // if the ad server returns a video ad for a banner type placement\n    // or a rich media ad trying to display in a video ad\n}\n</code></pre><p>For <code>SAParentalGateInterface</code>:</p>\n<pre><code>public void parentalGateWasCanceled(int placementId) {\n    // called when a user cancels a parental gate\n}\n\npublic void parentalGateWasFailed(int placementId) {\n    // called when a user typed an incorrect number into the parental gate\n    // and it failed\n}\n\npublic void parentalGateWasSucceded(int placementId) {\n    // called when a user typed the correct number into the parental gate\n    // and went forward\n}\n</code></pre><p>For <code>SAVideoAdInterface</code>:</p>\n<pre><code>public void adStarted(int placementId){\n    // called when an Ad in the video VAST XML started to play\n}\n\npublic void videoStarted(int placementId){\n    // called when a video inside an Ad started to play\n}\n\npublic void videoReachedFirstQuartile(int placementId){\n    // when the same video reached 1/4 of playing time\n}\n\npublic void videoReachedMidpoint(int placementId){\n    // when the same video reached 1/2 of playing time\n}\n\npublic void videoReachedThirdQuartile(int placementId){\n    // when the same video reached 3/4 of playing time\n}\n\npublic void videoEnded(int placementId){\n    // when the same video reached the end\n}\n\npublic void adEnded(int placementId){\n    // when the ad started in adStarted callback ended\n}\n\npublic void allAdsEnded(int placementId){\n    // when all ads in the VAST tag ended playing\n}\n</code></pre>"
        },
        {
            "name": "MoPub Integration",
            "sections": [
                {
                    "name": "Initial Setup",
                    "text": "<p>If you already have MoPub ads serving in your app, but want to integrate SuperAwesome as well, without having to directly call the AwesomeAds SDK, you can follow the steps below:</p>\n<h4 id=\"setting-up-mopub-in-your-unity-project\">Setting up MoPub in your Unity Project</h4>\n<p>The first thing you&#39;ll need to do, once you&#39;ve created a new Unity project, is to head over to <a href=\"https://dev.twitter.com/mopub/unity\">MoPub&#39;s developer page</a> and download the latest <a href=\"http://mopub-unity.mopub.com.s3.amazonaws.com/v3.8.0.zip\">MoPub plugin</a>.\nThis should contain a couple of .unitypackage files, chief among them <strong>MoPubPlugin.unitypackage</strong>. You&#39;ll need to import this into your Unity project.</p>\n<p><img src=\"img/IMG_15_MoPub1.png\" alt=\"\" title=\"unitypackage\"></p>\n<p>This should have created a new folder structure in your project:</p>\n<p><img src=\"img/IMG_15_MoPub2.png\" alt=\"\" title=\"folder structure\"></p>\n<h4 id=\"adding-awesomeads-adapters\">Adding AwesomeAds adapters</h4>\n<p>Next you&#39;ll need to download the AwesomeAds MoPub adapters for iOS and Android and add them to your Unity project.</p>\n<p>For iOS you&#39;ll need to download:</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-ios/master/Pod/Plugin/MoPub/SuperAwesomeBannerCustomEvent.h\">SuperAwesomeBannerCustomEvent.h</a></li>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-ios/master/Pod/Plugin/MoPub/SuperAwesomeBannerCustomEvent.m\">SuperAwesomeBannerCustomEvent.m</a></li>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-ios/master/Pod/Plugin/MoPub/SuperAwesomeInterstitialCustomEvent.h\">SuperAwesomeInterstitialCustomEvent.h</a></li>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-ios/master/Pod/Plugin/MoPub/SuperAwesomeInterstitialCustomEvent.m\">SuperAwesomeInterstitialCustomEvent.m</a></li>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-ios/master/Pod/Plugin/MoPub/SuperAwesomeRewardedVideoCustomEvent.h\">SuperAwesomeRewardedVideoCustomEvent.h</a></li>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-ios/master/Pod/Plugin/MoPub/SuperAwesomeRewardedVideoCustomEvent.m\">SuperAwesomeRewardedVideoCustomEvent.m</a></li>\n</ul>\n<p>and place them into the <code>Assets/Editor/MoPub/NativeCode</code> folder.</p>\n<p><img src=\"img/IMG_15_MoPub3.png\" alt=\"\" title=\"added files\"></p>\n<p>For Android you&#39;ll just need to download <a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android/blob/develop_v3/docs/res/samopub.jar?raw=true\">samopub.jar</a> and place it into <code>Assets/Plugins/Android</code> folder.</p>\n<p><img src=\"img/IMG_15_MoPub4.png\" alt=\"\" title=\"added jar\"></p>\n<p>To setup MoPub <strong>AdUnits</strong> in Unity, follow the guide <a href=\"https://dev.twitter.com/mopub/unity\">here</a>.\nThis will detail Banner, Interstitial and Rewarded video ads - all of which are fully supported by AwesomeAds.</p>\n<h4 id=\"adding-ads\">Adding ads</h4>\n<p>Summing up the previous detailed guide, use the following generic code to display:</p>\n<ul>\n<li>Banner Ads</li>\n</ul>\n<pre><code>MoPub.createBanner( BANNER_ADUNIT_ID, MoPubAdPosition.BottomCenter );\n</code></pre><ul>\n<li>Interstitial Ads</li>\n</ul>\n<pre><code>MoPub.requestInterstitialAd( INTERSTITIAL_ADUNIT_ID );\nMoPub.showInterstitialAd( INTERSTITIAL_ADUNIT_ID );\n</code></pre><ul>\n<li>Rewarded Video Ads</li>\n</ul>\n<pre><code>MoPub.initializeRewardedVideo();\nMoPub.requestRewardedVideo( VIDEO_ADUNIT_ID );\nMoPub.showRewardedVideo( VIDEO_ADUNIT_ID );\n</code></pre>"
                },
                {
                    "name": "Export to iOS",
                    "text": "<p>Once you have the MoPub unity plugin and AwesomeAds MoPub adapters into your Unity project, and have decided which types of ads to display, it&#39;s now time to export to iOS.</p>\n<p><img src=\"img/IMG_15_MoPub9.png\" alt=\"\" title=\"export to iOS\"></p>\n<h3 id=\"getting-the-ios-sdk\">Getting the iOS SDK</h3>\n<p>The iOS project you create will have most things ready, but will miss the actual AwesomeAds iOS SDK, that makes everything work.\nTo install it, you can either follow the instructions  <a href=\"https://developers.superawesome.tv/docs/androidsdk/Getting%20Started/Adding%20the%20Library%20to%20Your%20Project?version=3\">here</a> or follow the shortened version presented below:</p>\n<p>First, you&#39;ll need to open up a Terminal window on your Mac, and install CocoaPods, a library dependency management tool.</p>\n<pre><code>sudo gem install cocoapods\n</code></pre><p>Then go to the root folder of the project you just exported and init CocoaPods.</p>\n<pre><code>cd /unity_export_project_root\npod init\n</code></pre><p>This will create a file called <code>Podfile</code>, which you&#39;ll need to edit to look like this:</p>\n<pre><code># Uncomment this line to define a global platform for your project\nplatform :ios, &#39;6.0&#39;\n\ntarget &#39;Unity-iPhone&#39; do\n  pod &#39;SuperAwesome/Unity&#39;\nend\n</code></pre><p>Save and exit. Finally, in your Terminal window:</p>\n<pre><code>pod update\n</code></pre><p>This will install the AwesomeAds SDK as a dependency of the Unity iOS project you just exported.\nYou&#39;ll be prompted by CocoaPods to use the <strong>.xcworkspace</strong> file from now one, not the <strong>.xcproj</strong> one.</p>\n"
                },
                {
                    "name": "Export to Android",
                    "text": "<p>With Android you&#39;ll need to follow a similar patter.</p>\n<p>Start by actually exporting the project:</p>\n<p><img src=\"img/IMG_15_MoPub10.png\" alt=\"\" title=\"export to android\"></p>\n<p>Again, you&#39;ll miss the actual Android SDK from the newly created Android Studio project.</p>\n<p>The simplest way of installing the AwesomeAds SDK in Android Studio is to download the AAR library through Gradle.</p>\n<p>Just include the following in your module&#39;s <code>build.gradle</code> file (usually the file under <code>MyApplication/app/</code>):</p>\n<pre><code>repositories {\n    maven {\n        url  &quot;http://dl.bintray.com/sharkofmirkwood/maven&quot;\n    }\n}\n\ndependencies {\n    compile &#39;tv.superawesome.sdk:sa-sdk:3.5.3@aar&#39;\n    compile &#39;com.google.android.gms:play-services:8.4.0&#39;\n    compile files(&#39;libs/mopub-volley-1.1.0.jar&#39;)\n    compile files(&#39;libs/samopub.jar&#39;)\n    compile files(&#39;libs/unity-classes.jar&#39;)\n    compile files(&#39;libs/MoPubPlugin.jar&#39;)\n}\n</code></pre><p>Notice that:</p>\n<ul>\n<li><strong>unity-classes.jar</strong> is provided by Unity.</li>\n<li><strong>mopub-volley-1.1.0.jar</strong> is provided by the MoPub Unity Plugin</li>\n<li><strong>MoPubPlugin.jar</strong> is provided by the MoPub Unity Plugin (and you sometimes have to copy it from the <code>moPub_lib/lib</code> folder of the exported project and add it as a library in Android Studio)</li>\n<li><strong>samopub.jar</strong> is the SuperAwesome MoPub adapters library you downloaded earlier</li>\n<li>Otherwise we just register a SuperAwesome repository and add the library and google play services.   </li>\n</ul>\n"
                },
                {
                    "name": "Create a Custom Native Network for SuperAwesome",
                    "text": "<p>The final step is to create a Custom Native Network to interface with SuperAwesome, if you haven&#39;t already.</p>\n<p>From your MoPub admin interface you should create a <code>New Network</code></p>\n<p><img src=\"img/IMG_15_MoPub5.png\" alt=\"\" title=\"Adding a new Network\"></p>\n<p>Form the next menu, select <code>Custom Native Network</code></p>\n<p><img src=\"img/IMG_15_MoPub6.png\" alt=\"\" title=\"Creating a Custom Native Network\"></p>\n<p>You&#39;ll be taken to a new page. Here select the title of the new network</p>\n<p><img src=\"img/IMG_15_MoPub7.png\" alt=\"\" title=\"Create the Super Awesome Network\"></p>\n<p>And assign custom inventory details for Banner, Interstitial and Video ads:</p>\n<p><img src=\"img/IMG_15_MoPub8.png\" alt=\"\" title=\"Setup custom inventory\"></p>\n<p>Custom Event Classes for iOS are:</p>\n<ul>\n<li>for Banner Ads: <code>SuperAwesomeBannerCustomEvent</code></li>\n<li>for Interstitial Ads: <code>SuperAwesomeInterstitialCustomEvent</code></li>\n<li>for Rewarded Video Ads: <code>SuperAwesomeRewardedVideoCustomEvent</code></li>\n</ul>\n<p>Custom Event Classes for Android are:</p>\n<ul>\n<li>for Banner Ads: <code>com.mopub.sa.mobileads.SuperAwesomeBannerCustomEvent</code></li>\n<li>for Interstitial Ads: <code>com.mopub.sa.mobileads.SuperAwesomeInterstitialCustomEvent</code></li>\n<li>for Rewarded Video Ads: <code>com.mopub.sa.mobileads.SuperAwesomeRewardedVideoCustomEvent</code></li>\n</ul>\n<p>Custom Event Data that is always required, and must be given in the form of  JSON:</p>\n<pre><code>{\n    &quot;placementId&quot;: 5692,\n    &quot;isTestEnabled&quot;: true,\n    &quot;isParentalGateEnabled&quot;: true\n}\n</code></pre><p>Optional Event Data for Rewarded Videos is:</p>\n<pre><code>{\n  &quot;shouldShowCloseButton&quot;: false,\n  &quot;shouldAutomaticallyCloseAtEnd&quot;: true\n}\n</code></pre><p>If you don&#39;t yet have a Placement ID for Awesome Ads, check out the <a href=\"https://developers.superawesome.tv/docs/iossdk/Getting%20Started/Registering%20Your%20App%20on%20the%20Dashboard?version=4\">Getting Started / Registering Your App on the Dashboard</a> section.</p>\n"
                }
            ]
        },
        {
            "name": "Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        }
    ]
}