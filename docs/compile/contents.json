{
    "name": "Unity SDK",
    "text": "<p>The SuperAwesome Unity SDK (Software Development Kit) lets you to easily add COPPA-compliant display and Awesome3D advertisements to your apps.</p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "text": "<p>If you haven&#39;t registered your app on the SuperAwesome Dashboard yet, you can do that by going to <a href=\"http://beta.dashboard.superawesome.tv\">http://beta.dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Add your app on the dashboard and create the placements with the format that you want to use in your app. To get SuperAwesome ads working in your app you will only have to note down your placement ID from our dashboard.</p>\n<p>To integrate the SDK into your app, first download the SuperAwesome.unitypackage file from <a href=\"https://github.com/SuperAwesomeLTD/sa-unity-sdk/raw/master/SuperAwesome.unitypackage\">https://github.com/SuperAwesomeLTD/sa-unity-sdk/raw/master/SuperAwesome.unitypackage</a> and then drag and drop it into your current Unity project.</p>\n"
        },
        {
            "name": "Banner Ads",
            "text": "<p>After importing the SuperAwesome Unity package, navigate to the Assets/SuperAwesome directory in the Project tab, locate the &#39;SuperAwesome Banner&#39; prefab:</p>\n<p><img src=\"img/sa_banner_prefab.png\" alt=\"\" title=\"SuperAwesome Banner Prefab\"></p>\n<p>Drag the prefab into your scene; you should see a canvas containing the banner ad. Select the banner ad in order to modify its options in the Inspector tab.</p>\n<p><img src=\"img/banner_inspector.png\" alt=\"\" title=\"Banner Inspector\"></p>\n<p>Note: Make sure you select the Banner object, not the &#39;SuperAwesome Banner&#39; parent, as seen in the hierarchy tab:</p>\n<p><img src=\"img/banner_hierarchy.png\" alt=\"\" title=\"Banner Object in Hierarchy\"></p>\n<p>In the inspector tab you can change the options for your banner ad. Possible options include:</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Placement ID</td>\n<td>This is your placement ID, as found on the SuperAwesome Dashboard.</td>\n</tr>\n<tr>\n<td>Layout</td>\n<td>Can be selected from Manual, Top or Bottom. If Manual is selected, the ad will be show wherever you choose to place it. Otherwise it will appear at the top or bottom of the screen.</td>\n</tr>\n<tr>\n<td>Refresh After Seconds</td>\n<td>The banner will reload with a new ad every 30 seconds by default. You can change the rate using this option.</td>\n</tr>\n<tr>\n<td>Test Mode</td>\n<td>If selected, the banner will only load test ads from the server. Use this option while developing, and turn it off when your app is ready for production.</td>\n</tr>\n<tr>\n<td>is Parental Gate Enabled</td>\n<td>When set to true, a parental gate will appear when users press on an ad. If users can solve a basic math question, they will be allowed to pass through. Else they will remain in the application</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "Interstitial Ads",
            "text": "<p>After importing the SuperAwesome Unity package, navigate to the Assets/SuperAwesome directory in the Project tab, locate the &#39;SuperAwesome Interstitial&#39; prefab:</p>\n<p><img src=\"img/sa_interstitial_prefab.png\" alt=\"\" title=\"SuperAwesome Interstitial Prefab\"></p>\n<p>Drag the prefab into your scene; you should see a canvas containing the interstitial ad. Select the interstitial ad in order to modify its options in the Inspector tab.</p>\n<p><img src=\"img/interstitial_inspector.png\" alt=\"\" title=\"Interstitial Inspector\"></p>\n<p>Note: Make sure you select the Interstitial object, not the &#39;SuperAwesome Interstitial&#39; parent, as seen in the hierarchy tab:</p>\n<p><img src=\"img/interstitial_hierarchy.png\" alt=\"\" title=\"Interstitial Object in Hierarchy\"></p>\n<p>In the inspector tab you can change the options for your interstitial ad. Possible options include:</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Placement ID</td>\n<td>This is your placement ID, as found on the SuperAwesome Dashboard.</td>\n</tr>\n<tr>\n<td>Test Mode</td>\n<td>If selected, the interstitial will only load test ads from the server. Use this option while developing, and turn it off when your app is ready for production.</td>\n</tr>\n<tr>\n<td>Open Instantly</td>\n<td>If selected, the interstitial will load and show instantly. If not, you will have to manually play it using the Show() function</td>\n</tr>\n<tr>\n<td>is Parental Gate Enabled</td>\n<td>When set to true, a parental gate will appear when users press on an ad. If users can solve a basic math question, they will be allowed to pass through. Else they will remain in the application</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "iOS and Android Configuration",
            "sections": [
                {
                    "name": "Advanced features",
                    "text": "<p>There are some advanced features of the SDK that are only available at this moment to native iOS and Android apps, such as:</p>\n<ul>\n<li>Video playing</li>\n<li>Parental Gate</li>\n<li>Padlock for verified ads</li>\n</ul>\n<p>These will be ignored by default in Unity testing mode. The following two sections will explain how to properly setup the iOS and Android working environments to have access to these features.</p>\n"
                },
                {
                    "name": "iOS",
                    "text": "<h3 id=\"exporting-a-unity-project-to-ios\">Exporting a Unity project to iOS</h3>\n<p>The first step to creating an iOS project is exporting it from Unity.\nTo do so, go to File -&gt; Build Settings and from the pop-up window select <code>iOS</code>. Then select:</p>\n<ul>\n<li>Symlink Unity libraries</li>\n<li>Development Build (optional)</li>\n</ul>\n<p><img src=\"img/export_ios.png\" alt=\"\" title=\"Exporting project to iOS\"></p>\n<p>Then press on the <code>Player settings</code> button and make sure:</p>\n<ul>\n<li>Target iOS version is at least 6.0 </li>\n<li>SDK version is either Simulator or Device, depending on your test mode</li>\n</ul>\n<p><img src=\"img/export_ios2.png\" alt=\"\" title=\"Configuring Player settings for iOS\"></p>\n<p>Next, press on <code>Build</code> and save your project in a separate folder, for example <code>UnityiOSSADemo</code>. The folder will be populated by XCode files, including the essential <code>Unity-iPhone.xcodeproj</code>.</p>\n<h3 id=\"adding-specific-superawesome-functionality\">Adding specific SuperAwesome functionality</h3>\n<p>Up until this point, these are the standard steps required to export any Unity project to iOS.\nIn order to add advanced functionality to AwesomeAds, the next step is to integrate the iOS SuperAwesome SDK into your current iOS Project.</p>\n<p>To to this, follow the standard instructions presented here: <a href=\"https://developers.superawesome.tv/docs/iossdk/Getting%20Started/Integrating%20the%20SDK?version=2\">https://developers.superawesome.tv/docs/iossdk/Getting%20Started/Integrating%20the%20SDK?version=2</a></p>\n<p>In short, the SuperAwesome iOS SDK resides on CocoaPodss. To install it, you need to add it just like you would any other CocoaPods library.</p>\n<p>After the CocoaPod dependency has been added, open the <code>xcworkspace</code> file in your project&#39;s directory (not the <code>xcodeproj</code> file) with Xcode. You have to make some changes to the default Unity build configuration, as the CocoaPods settings need to be propagated in the build target but won&#39;t have done so since Unity has already set these values.</p>\n<p><img src=\"img/xcode_build_settings.png\" alt=\"\" title=\"Find the Build Settings and change the values mentioned below.\"></p>\n<p>You will need to search for each of <code>OTHER_LDFLAGS</code>, <code>OTHER_CFLAGS</code> and <code>HEADER_SEARCH_PATHS</code>, double-click on them, and add <code>$(inherited)</code> to the list of existing values for these settings. You likely will have also received a message when running <code>pod update</code>, warning you to do this.</p>\n<p>Finally, when targeting devices for iOS 9 onwards, don&#39;t forget to add, for the moment, the following key to your plist file:</p>\n<pre><code>&lt;dict&gt;\n    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n</code></pre><p>to be able to load data over both HTTPS and HTTP.</p>\n<p>Once this is done your iOS project will be ready to use and any calls to the native SDK from your Unity project will work as expected.</p>\n"
                },
                {
                    "name": "Android",
                    "text": "<h3 id=\"exporting-a-unity-project-to-android\">Exporting a Unity project to Android</h3>\n<p>The first step to creating an iOS project is exporting it from Unity.\nTo do so, go to File -&gt; Build Settings and from the pop-up window select <code>Android</code>. Then select:</p>\n<ul>\n<li>Google Android Project</li>\n<li>Development Build (optional)</li>\n</ul>\n<p><img src=\"img/export_android.png\" alt=\"\" title=\"Exporting project to Android\"></p>\n<p>Then press on the <code>Player settings</code> button and make sure:</p>\n<ul>\n<li>Minimum API level Android Ice Cream Sandwish 4.0</li>\n</ul>\n<p><img src=\"img/export_android2.png\" alt=\"\" title=\"Configuring Player settings for Android\"></p>\n<p>Next, press on <code>Build</code> and save your project in a separate folder, for example <code>UnityAndroidSADemo</code>. The folder will be populated by Android Studio files.</p>\n<p>After Unity has exported your Android project, add an empty <code>settings.gradle</code> file to the project root (the folder which contains the <code>src</code> directory). Then you can import the project using Android Studio. When given the option to select the project to import, choose the <code>settings.gradle</code> file and Android Studio will import the project, filling the settings file and creating the additional required Gradle files.</p>\n<p><img src=\"img/import_project.png\" alt=\"\" title=\"Importing your Unity project to Android Studio\"></p>\n<h3 id=\"adding-specific-superawesome-functionality\">Adding specific SuperAwesome functionality</h3>\n<p>Up until this point, these are the standard steps required to export any Unity project to Android.\nIn order to add advanced functionality to AwesomeAds, the next step is to integrate the Android SuperAwesome SDK into your current Android Project.</p>\n<p>First make sure you have the SDK downloaded - you can get it here: <a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android\">https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android</a> and you can save it anywhere on your computer.</p>\n<p>In Android Studio, go to &quot;File &gt; New &gt; Import Module...&quot; and, when prompted, select the &#39;superawesomesdk&#39; directory from the files you just downloaded. This will import the SDK files into your project.</p>\n<p>The last step is to add a dependency on the SDK for your project. The simplest way to do this is to open the <code>build.gradle</code> file in the <code>app</code> folder of your project (not the global project one), find the <code>dependencies</code> section and add the following line:</p>\n<pre><code>compile project(&#39;:bee7androidsdkgamewall&#39;)\ncompile project(&#39;:superawesomesdk&#39;)\n</code></pre><p>It can also be done by adding a &#39;Module dependency&#39; in the settings for your project and choosing the &#39;superawesomesdk&#39; module. Whichever way you do it, your <code>build.gradle</code> file should have a dependencies section like this:</p>\n<pre><code>dependencies {\n    compile files(&#39;libs/unity-classes.jar&#39;)\n    compile project(&#39;:bee7androidsdkgamewall&#39;)\n    compile project(&#39;:superawesomesdk&#39;)\n}\n</code></pre><p>Additionally you may want to add two lines to your global <code>build.gradle</code> file, in the dependencies part:</p>\n<pre><code>classpath &#39;com.github.dcendents:android-maven-plugin:1.2&#39;\nclasspath &#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1&#39;\n</code></pre><p>Now your Android project will be ready to use and any calls to the native SDK from your Unity project will work as expected.</p>\n"
                }
            ]
        },
        {
            "name": "Video Ads",
            "text": "<p>Once you exported your Unity project to either iOS or Android, and added the AwesomeAds SDK, adding a video ad is easy.</p>\n<p>Again, navigate to the Assets/SuperAwesome directory in the Project tab and locate the &#39;SuperAwesome Video&#39; prefab.</p>\n<p><img src=\"img/sa_video_1.png\" alt=\"\" title=\"SuperAwesome Video Prefab\"></p>\n<p>Drag the prefab into your scene; you should see a canvas containing the video ad. </p>\n<p><img src=\"img/sa_video_2.png\" alt=\"\" title=\"Drag the Video in the scene\"></p>\n<p>Select the video ad in order to modify its options in the Inspector tab.</p>\n<p><img src=\"img/sa_video_3.png\" alt=\"\" title=\"Video Inspector\"></p>\n<p>In the inspector tab you can change the options for your video ad. Possible options include:</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Placement ID</td>\n<td>This is your placement ID, as found on the SuperAwesome Dashboard.</td>\n</tr>\n<tr>\n<td>Test Mode</td>\n<td>If selected, the video will only load test ads from the server. Use this option while developing, and turn it off when your app is ready for production.</td>\n</tr>\n<tr>\n<td>Should Autostart</td>\n<td>If selected, the video will load and show instantly. If not, you will have to manually play it using the open() function</td>\n</tr>\n<tr>\n<td>is Parental Gate Enabled</td>\n<td>When set to true, a parental gate will appear when users press on an ad. If users can solve a basic math question, they will be allowed to pass through. Else they will remain in the application</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "Parental Gate",
            "text": "<p>Parental gates are used in apps targeted towards kids to prevent them from engaging in commerce or following links out of an app to websites, social networks, or other apps without the knowledge of their parent or guardian. A parental gate presents an adult level task which must be completed in order to continue.</p>\n<p>You can enable our parental gate on banners, interstitials and video ads. You can enable the Parental Gate in the Inspector tab, by checking the <code>isParentalGateEnabled</code> checkmark available for each prefab.</p>\n<p><img src=\"img/sa_parentalgate.png\" alt=\"\" title=\"Parental gate in Inspector\"></p>\n<p>Once you do this and build and run your project, the Parental Gate will appear.</p>\n<p><img src=\"img/parental_gate.png\" alt=\"\" title=\"Parental Gate in Unity\"></p>\n"
        },
        {
            "name": "Testing Placements",
            "text": "<p>Our SDK has a test mode flag that if set, causes your placements to display our demo ads. This way you can easily test the production and the development version of your app separately. You can enable test mode for each ad by going in the Inspector tab and checking Test Mode.</p>\n<p>We also provide some demo placements that can be used for testing. These placements have a 100% fill rate.</p>\n<table>\n<thead>\n<tr>\n<th>Placement ID</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5687</td>\n<td>320x50 banner</td>\n</tr>\n<tr>\n<td>5692</td>\n<td>320x480 interstitial</td>\n</tr>\n<tr>\n<td>5740</td>\n<td>video</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "Troubleshooting",
            "text": "<h2 id=\"click-events-are-not-triggered\">Click events are not triggered</h2>\n<p>The click events are not triggered at all unless there is an EventSystem UI object. If this doesn&#39;t exist in the Hierarchy, add one from the <code>GameObject &gt; UI</code> menu.</p>\n"
        },
        {
            "name": "Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        }
    ]
}