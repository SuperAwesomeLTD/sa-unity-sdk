{
    "name": "Unity SDK",
    "text": "<p>The SuperAwesome Unity SDK (Software Development Kit) lets you to easily add COPPA-compliant display and Awesome3D advertisements to your apps.</p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "text": "<p>If you haven&#39;t registered your app on the SuperAwesome Dashboard yet, you can do that by going to <a href=\"http://beta.dashboard.superawesome.tv\">http://beta.dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Add your app on the dashboard and create the placements with the format that you want to use in your app. To get SuperAwesome ads working in your app you will only have to note down your placement ID from our dashboard.</p>\n<p>To integrate the SDK into your app, first download the SuperAwesome.unitypackage file from <a href=\"https://github.com/SuperAwesomeLTD/sa-unity-sdk/raw/master/SuperAwesome.unitypackage\">https://github.com/SuperAwesomeLTD/sa-unity-sdk/raw/master/SuperAwesome.unitypackage</a> and then drag and drop it into your current Unity project.</p>\n"
        },
        {
            "name": "Banner Ads",
            "text": "<p>After importing the SuperAwesome Unity package, navigate to the Assets/SuperAwesome directory in the Project tab, locate the &#39;SuperAwesome Banner&#39; prefab:</p>\n<p><img src=\"img/sa_banner_prefab.png\" alt=\"\" title=\"SuperAwesome Banner Prefab\"></p>\n<p>Drag the prefab into your scene; you should see a canvas containing the banner ad. Select the banner ad in order to modify its options in the Inspector tab.</p>\n<p><img src=\"img/banner_inspector.png\" alt=\"\" title=\"Banner Inspector\"></p>\n<p>Note: Make sure you select the Banner object, not the &#39;SuperAwesome Banner&#39; parent, as seen in the hierarchy tab:</p>\n<p><img src=\"img/banner_hierarchy.png\" alt=\"\" title=\"Banner Object in Hierarchy\"></p>\n<p>In the inspector tab you can change the options for your banner ad. Possible options include:</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Placement ID</td>\n<td>This is your placement ID, as found on the SuperAwesome Dashboard.</td>\n</tr>\n<tr>\n<td>Layout</td>\n<td>Can be selected from Manual, Top or Bottom. If Manual is selected, the ad will be show wherever you choose to place it. Otherwise it will appear at the top or bottom of the screen.</td>\n</tr>\n<tr>\n<td>Refresh After Seconds</td>\n<td>The banner will reload with a new ad every 30 seconds by default. You can change the rate using this option.</td>\n</tr>\n<tr>\n<td>Test Mode</td>\n<td>If selected, the banner will only load test ads from the server. Use this option while developing, and turn it off when your app is ready for production.</td>\n</tr>\n<tr>\n<td>is Parental Gate Enabled</td>\n<td>When set to true, a parental gate will appear when users press on an ad. If users can solve a basic math question, they will be allowed to pass through. Else they will remain in the application</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "Interstitial Ads",
            "text": "<p>After importing the SuperAwesome Unity package, navigate to the Assets/SuperAwesome directory in the Project tab, locate the &#39;SuperAwesome Interstitial&#39; prefab:</p>\n<p><img src=\"img/sa_interstitial_prefab.png\" alt=\"\" title=\"SuperAwesome Interstitial Prefab\"></p>\n<p>Drag the prefab into your scene; you should see a canvas containing the interstitial ad. Select the interstitial ad in order to modify its options in the Inspector tab.</p>\n<p><img src=\"img/interstitial_inspector.png\" alt=\"\" title=\"Interstitial Inspector\"></p>\n<p>Note: Make sure you select the Interstitial object, not the &#39;SuperAwesome Interstitial&#39; parent, as seen in the hierarchy tab:</p>\n<p><img src=\"img/interstitial_hierarchy.png\" alt=\"\" title=\"Interstitial Object in Hierarchy\"></p>\n<p>In the inspector tab you can change the options for your interstitial ad. Possible options include:</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Placement ID</td>\n<td>This is your placement ID, as found on the SuperAwesome Dashboard.</td>\n</tr>\n<tr>\n<td>Test Mode</td>\n<td>If selected, the interstitial will only load test ads from the server. Use this option while developing, and turn it off when your app is ready for production.</td>\n</tr>\n<tr>\n<td>Open Instantly</td>\n<td>If selected, the interstitial will load and show instantly. If not, you will have to manually play it using the Show() function</td>\n</tr>\n<tr>\n<td>is Parental Gate Enabled</td>\n<td>When set to true, a parental gate will appear when users press on an ad. If users can solve a basic math question, they will be allowed to pass through. Else they will remain in the application</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "Video Ads",
            "sections": [
                {
                    "name": "Configuration",
                    "text": "<p>At the moment video ads are only available on iOS and Android. If you deploy to any other platform the video playing methods will have no effect.</p>\n<p>The video ads make calls to native iOS and Android libraries through our SDKs, and as such you will need to include the native SDK into your project after Unity has built it. Instructions to do so vary depending on the platform, and can be found below: </p>\n<h2 id=\"android\">Android</h2>\n<p>In the Player Settings pane set the minimum API level setting to Android 4.0 (API level 14) if it is lower.</p>\n<p>When you export the Android project check the Google Android Project checkbox. This gives you an Android project you can modify in Android Studio, and allows you to import the SuperAwesome Android SDK before compiling for your device.</p>\n<p>After Unity has exported your Android project, add an empty <code>settings.gradle</code> file to the project root (the folder which contains the <code>src</code> directory). Then you can import the project using Android Studio. When given the option to select the project to import, choose this file and Android Studio will import the project, filling the settings file and creating the additional required Gradle files.</p>\n<p><img src=\"img/import_project.png\" alt=\"\" title=\"Importing your Unity project to Android Studio\"></p>\n<p>Now you will have an Android Studio project set up using Gradle; with this you can import the SuperAwesome SDK for Android. First make sure you have the SDK downloaded - you can get it here: <a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android/tree/2.0.1-beta-1\">https://github.com/SuperAwesomeLTD/sa-mobile-sdk-android/tree/2.0.1-beta-1</a></p>\n<p>In Android Studio, go to &quot;File &gt; New &gt; Import Module...&quot; and, when prompted, select the &#39;superawesomesdk&#39; directory from the files you just downloaded. This will import the SDK files into your project.</p>\n<p>The last step is to add a dependency on the SDK for your project. The simplest way to do this is to open the <code>build.gradle</code> file for your project, find the <code>dependencies</code> section and add the following line:</p>\n<pre><code>compile project(&#39;:superawesomesdk&#39;)\n</code></pre><p>It can also be done by adding a &#39;Module dependency&#39; in the settings for your project and choosing the &#39;superawesomesdk&#39; module. Whichever way you do it, your <code>build.gradle</code> file should have a dependencies section like this:</p>\n<pre><code>dependencies {\n    compile files(&#39;libs/unity-classes.jar&#39;)\n    compile project(&#39;:superawesomesdk&#39;)\n}\n</code></pre><p>Now your Android project will be ready to use and any calls to the native SDK from your Unity project will work as expected.</p>\n<h2 id=\"ios\">iOS</h2>\n<p>In the Player Settings pane set the Target iOS Version setting to 6.0 if it is lower.</p>\n<p>After you have built your iOS project, you have to manually add the SuperAwesome SDK. To do this, follow the instructions in the iOS SDK documentation:</p>\n<p><a href=\"https://developers.superawesome.tv/docs/iossdk_v2/Getting%20Started/Integrating%20the%20SDK\">https://developers.superawesome.tv/docs/iossdk_v2/Getting%20Started/Integrating%20the%20SDK</a></p>\n<p>After the CocoaPod dependency has been added, open the <code>xcworkspace</code> file in your project&#39;s directory (not the <code>xcodeproj</code> file) with Xcode. You have to make some changes to the default Unity build configuration, as the CocoaPods settings need to be propagated in the build target but won&#39;t have done so since Unity has already set these values.</p>\n<p><img src=\"img/xcode_build_settings.png\" alt=\"\" title=\"Find the Build Settings and change the values mentioned below.\"></p>\n<p>You will need to search for each of <code>OTHER_LDFLAGS</code>, <code>OTHER_CFLAGS</code> and <code>HEADER_SEARCH_PATHS</code>, double-click on them, and add <code>$(inherited)</code> to the list of existing values for these settings. You likely will have also received a message when running <code>pod update</code>, warning you to do this.</p>\n<p>Once this is done your iOS project will be ready to use and any calls to the native SDK from your Unity project will work as expected.</p>\n"
                },
                {
                    "name": "Playing Video Ads",
                    "text": "<p>To display a video ad you just have to call <code>SuperAwesome.VideoAd.open</code> with your placement ID.</p>\n<pre><code>SuperAwesome.VideoAd.open (&quot;__YOUR_PLACEMENT_ID__&quot;);\n</code></pre><p>You can optionally pass a second boolean parameter <code>testMode</code> - if set to true, the SDK will display a demo ad instead of fetching a real ad. This is recommended while you are still in development.</p>\n"
                }
            ]
        },
        {
            "name": "Troubleshooting",
            "text": "<h2 id=\"click-events-are-not-triggered\">Click events are not triggered</h2>\n<p>The click events are not triggered at all unless there is an EventSystem UI object. If this doesn&#39;t exist in the Hierarchy, add one from the <code>GameObject &gt; UI</code> menu.</p>\n"
        },
        {
            "name": "Technical Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        }
    ]
}