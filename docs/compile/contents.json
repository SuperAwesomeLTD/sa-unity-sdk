{
    "name": "Unity SDK",
    "text": "<p>The SuperAwesome Unity SDK (Software Development Kit) lets you to easily add COPPA-compliant display and Awesome3D advertisements to your apps.</p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "text": "<p>Grab the SDK from Github: <a href=\"https://github.com/SuperAwesomeLTD/sa-unity-sdk\">https://github.com/SuperAwesomeLTD/sa-unity-sdk</a></p>\n<p>The SDK contains:</p>\n<ul>\n<li>2 class files (ad and MiniJSON)</li>\n<li>A resources folder</li>\n</ul>\n"
        },
        {
            "name": "Display Ads",
            "text": "<p>Find your App ID and Placement ID on the <a href=\"http://dashboard.superawesome.tv\">dashboard</a>.</p>\n<p>You can then import the folders downloaded previously into your unity project (simply drag and drop). To keep everything separated we recommend you put the files inside &quot;Assets/SuperAwesome/&quot;- however the files will work as long as they are imported anywhere inside the &quot;Assets&quot; folder.</p>\n<p>In order to display an ad, create a &quot;GUITexture&quot; GameObject, and add the &quot;ad.cs&quot; script to it (you can drag the script into the object in the Hierarchy pane).</p>\n<p>There are some options you can configure before you can display an ad. Click on the GameObject you just created in the Hierarchy pane and find the ad script in the inspector.</p>\n<p>The options are:</p>\n<ul>\n<li>App_id (Required): Your App ID from the Dashboard</li>\n<li>Placement_id (Required): Your Placement ID from the dashboard</li>\n<li>Hide (Default: false): If true the ad will be hidden until you decide to show it programmatically</li>\n<li>Closable (Default: false): If true a close button will appear at the top right of the ad to allow users to close the ad. This is recommended for interstitial ads so the users can continue to use your app after being shown the ad without you having to hide it manually</li>\n<li>Fix Placement (Default: Not Fixed): has 4 options:<ul>\n<li>Not Fixed: The ad will display wherever you place it</li>\n<li>Top: The ad will be fixed to the top of the screen</li>\n<li>Bottom: The ad will be fixed to the bottom of the screen</li>\n<li>Center: The ad will be fixed to the middle of the screen</li>\n</ul>\n</li>\n</ul>\n<p>In order to show or hide an ad programmatically, you first need to import the <code>superawesome</code> namespace. You then need to select the GameObject and then the ad component of that object. You can then call the <code>toggleAd();</code> function to hide or show the ad.</p>\n<p>Here is an example for a GameObject named &quot;Interstitial&quot; in C# that shows/hides the ad every 3 seconds.</p>\n<pre><code>using UnityEngine;\nusing System.Collections;\nusing superawesome; // Import the namespace\n\npublic class toggleAdTest : MonoBehaviour {\n\n    public GameObject adObject;\n    public ad adComponent;\n\n    void Start () {\n        adObject = GameObject.Find(&quot;Interstitial&quot;); // Find the GameObject you wish to modify\n        adComponent = (ad) adObject.GetComponent(typeof(ad)); // Assign a variable to the ad component\n\n        StartCoroutine(toggleTest());\n    }\n\n    IEnumerator toggleTest() {\n        yield return new WaitForSeconds(3);\n\n        // check that the ad has loaded and can be displayed\n        // Only matters if ad is currently hidden and so toggleAd() would show the ad\n        if (adComponent.adReady) { \n            adComponent.toggleAd(); // Show or Hide the ad, depending on its current state\n        }\n\n        StartCoroutine(toggleTest());\n    }\n}\n</code></pre>"
        },
        {
            "name": "Awesome3D Ads",
            "text": "<p>The Unity SDK allows you to create in game ads for the user to interact with. These can be walls or posters or shirts or any other GameObject that allows a texture to be rendered.</p>\n<p><a href=\"http://www.youtube.com/embed/6TtnqCP6pOE\">http://www.youtube.com/embed/6TtnqCP6pOE</a></p>\n<p>To do this, create a GameObject and attach the &quot;ad.cs&quot; script as with a Display Ad. Then in the inspector menu input your App_id and Placement_id.</p>\n<p>Note: the &quot;Closable&quot; and &quot;Fix Placement&quot; options have no effect on Awesome3D Ads.</p>\n<p>There are a few things to be considered when using Awesome3D Ads:</p>\n<ul>\n<li>The GameObject will be disabled until the ad is loaded (unless &quot;Hide&quot; is set to true, in which case the ad will only show when called from a script). This means that if you attach the ad to a wall for example, the wall will not exist in game until the ad has loaded. There are 2 solutions if you want to change this:<ul>\n<li>Put a quad in front of the wall and attach the ad to that - this has other advantages (such as the wall itself will not be resized when the ad is loaded, and the ad will only show on one face of the wall, instead of all of them).</li>\n<li>You can copy the ad.cs file and comment out the following lines which can be found at the start of the <code>Start()</code> function:<pre><code>if (!gameObject.guiTexture) {\n  renderer.enabled = false;\n} else {\n  guiTexture.enabled = false;\n}\n</code></pre>You will need to proved a default texture with this method however.</li>\n</ul>\n</li>\n<li>The GameObject that &quot;ad.cs&quot; is attached to will be resized when the ad is loaded to maintain the correct aspect ratio of the ad.<ul>\n<li>Only the &quot;x&quot; and &quot;y&quot; dimensions are changed, the &quot;z&quot; dimension will remain as set by you.</li>\n<li>The GameObject will never be resized to be bigger than any dimension you set.</li>\n</ul>\n</li>\n<li>The &quot;ad.cs&quot; script will add a Box Collider component to the GameObject. This is required for user clicks to be registered.</li>\n<li>Planes are currently not supported. It is recommended to use a Quad instead.</li>\n</ul>\n"
        },
        {
            "name": "Video Ads",
            "sections": [
                {
                    "name": "Configuration",
                    "text": "<p>At the moment video ads are only available on iOS and Android. If you deploy to an other platform the video playing methods will have no effect.</p>\n<p>To use the native plugins for video you will first need to include the &quot;Plugins&quot; folder from the SDK in the &quot;Assets&quot; folder of your project. This includes native Android and iOS code that Unity can call to make use of features from these platforms.</p>\n<h2 id=\"android\">Android</h2>\n<p>In the Player Settings pane set the minimum API level setting to Android 2.3.3 (API level 10) if it is lower.</p>\n<p>When you export the Android project check the Google Android Project checkbox. In the exported project the SuperAwesome SDK is automatically linked to your Unity project.</p>\n<h2 id=\"ios\">iOS</h2>\n<p>In the Player Settings pane set the Target iOS Version setting to 6.0 if it is lower.</p>\n<p>After you have built your iOS project, you have to manually add the SuperAwesome SDK. To do this, follow the instructions in the iOS SDK documentation:</p>\n<p><a href=\"https://developers.superawesome.tv/docs/iossdk/Getting%20Started/Integrating%20the%20SDK\">https://developers.superawesome.tv/docs/iossdk/Getting%20Started/Integrating%20the%20SDK</a></p>\n<p>After the CocoaPod dependency has been added, open the xcworkspace file in your project&#39;s directory. You have to make some changes to the default Unity build configuration:</p>\n<ol>\n<li><p>cocoapods settings needs to be propagated in the build target, but it doesn&#39;t since unity already set these values before.  Therefore you will have to manually add &quot;$(inherited)&quot; to all 3 build setting variables: OTHER_LDFLAGS, OTHER_CFLAGS, HEADER_SEARCH_PATHS</p>\n</li>\n<li><p>Unity did not set the build products path correctly, so you will need to correct it to look for where pods project will drop its libraries.  Set &quot;per-configuration build products path&quot; in build settings to this value: $(BUILD_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)</p>\n</li>\n</ol>\n"
                },
                {
                    "name": "Playing Video Ads",
                    "text": "<p>To display a video ad you only have to set your app ID and then call the openVideoAd with your placement ID.</p>\n<p>You can find your app and placement IDs on the <a href=\"http://dashboard.superawesome.tv\">Dashboard</a>.</p>\n<pre><code>SuperAwesome.setAppId (__APP_ID__);\nSuperAwesome.openVideoAd (&quot;__PLACEMENT_ID__&quot;);\n</code></pre><p>Do not forget to replace the <code>__YOUR_APP_ID__</code> and the <code>__YOUR_PLACEMENT_ID__</code> strings with your app ID and placement ID.</p>\n"
                }
            ]
        },
        {
            "name": "Parental Gate (iOS)",
            "text": "<p>Parental gates can be used within the Unity SDK, but currently only for apps that are deployed to iOS. The parental gate will not work for other apps, and all links will simply exit the application as usual.\nA parental gate presents an adult level task which must be completed in order to continue, thus preventing kids from engaging in commerce or following links out of an app to websites, social networks, or other apps without the knowledge of their parent or guardian.</p>\n<p>In order to implement the parental gate you must first follow the same instructions under the <strong>iOS</strong> section here in order for the native SDK to work with your app: <a href=\"https://developers.superawesome.tv/docs/unitysdk/Video%20Ads/Configuration\">https://developers.superawesome.tv/docs/unitysdk/Video%20Ads/Configuration</a></p>\n<p>Once this is done, you can simply toggle the parental gate for each ad using the check box for the ad.cs script on your object:</p>\n<p><img src=\"img/script_parental_gate.png\" alt=\"\" title=\"Parental Gate checkbox in the script options\"></p>\n<p>If this checkbox is toggled in an iOS app the user will be presented with the parental gate before leaving your application by clicking on an ad, and the browser will not open if the problem is not solved correctly.</p>\n<p><img src=\"img/parental_gate.png\" alt=\"\" title=\"Unity Parental Gate on iOS\"></p>\n"
        },
        {
            "name": "Technical Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        }
    ]
}